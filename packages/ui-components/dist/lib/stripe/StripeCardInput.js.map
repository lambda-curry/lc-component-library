{
  "version": 3,
  "sources": ["../../../src/lib/stripe/StripeCardInput.tsx"],
  "sourcesContent": ["import React, { FC, useState } from 'react';\nimport * as Stripe from '@stripe/stripe-js';\nimport { CardElement } from '@stripe/react-stripe-js';\nimport { useField, useFormikContext } from 'formik';\nimport './stripe-card-input.css';\nimport { arrayToListString } from '../util/formatters';\nimport classNames from 'classnames';\nimport { get as _get, set as _set } from 'lodash';\n\nexport type StripeCardBrand = Exclude<Stripe.StripeCardElementChangeEvent['brand'], 'unknown'>;\n\nexport type StripeCardBrandErrorMessage = string | ((brand: StripeCardBrand) => string);\n\nexport interface StripeCardInputProps {\n  name: string;\n  label?: string;\n  acceptedBrands?: StripeCardBrand[];\n  rejectedBrands?: StripeCardBrand[];\n  acceptedBrandsErrorMessage?: StripeCardBrandErrorMessage;\n  rejectedBrandsErrorMessage?: StripeCardBrandErrorMessage;\n}\n\n// Custom styling can be passed to options when creating an Element.\nconst CARD_ELEMENT_OPTIONS = {\n  style: {\n    base: {\n      color: 'black',\n      fontFamily: '\"gilroy\", sans-serif',\n      fontSize: '18px',\n      '::placeholder': {\n        color: '#a0a5ba',\n        fontSize: '16px'\n      },\n      iconColor: '#0068ff'\n    },\n    invalid: {\n      color: '#ff4500',\n      iconColor: 'darkred'\n    }\n  }\n};\n\nconst cardBrandNamesMap = {\n  visa: 'Visa',\n  mastercard: 'Mastercard',\n  amex: 'American Express',\n  discover: 'Discover',\n  diners: 'Diners Club',\n  jcb: 'JCB',\n  unionpay: 'UnionPay'\n};\n\nexport const StripeCardInput: FC<StripeCardInputProps> = ({\n  name,\n  label,\n  acceptedBrands,\n  acceptedBrandsErrorMessage,\n  rejectedBrands,\n  rejectedBrandsErrorMessage\n}) => {\n  const [cardDetails, setCardDetails] = useState<Stripe.StripeCardElementChangeEvent>();\n\n  const getAcceptedBrandsErrorMessage = (brand: StripeCardBrand) => {\n    const propsMessage = acceptedBrandsErrorMessage;\n\n    if (propsMessage) return typeof propsMessage === 'function' ? propsMessage(brand) : propsMessage;\n\n    return `We do not accept ${cardBrandNamesMap[brand]}. Please try ${arrayToListString(\n      acceptedBrands?.map(brand => cardBrandNamesMap[brand]) || [],\n      ' or '\n    )}.`;\n  };\n\n  const getRejectedBrandsErrorMessage = (brand: StripeCardBrand) => {\n    const propsMessage = rejectedBrandsErrorMessage;\n\n    if (propsMessage) return typeof propsMessage === 'function' ? propsMessage(brand) : propsMessage;\n\n    return `We do not accept ${arrayToListString(\n      rejectedBrands?.map(brand => cardBrandNamesMap[brand]) || [],\n      ' or '\n    )}. Please try a different card.`;\n  };\n\n  const validate = (value: any) => {\n    if (!cardDetails || cardDetails.empty) return `Please enter your credit card information.`;\n\n    const { error, brand } = cardDetails;\n\n    // Stripe errors take priority.\n    if (error) return error.message;\n\n    // Don't check rejected or accepted brands if the brand is \"unknown\".\n    if (brand === 'unknown') return;\n\n    // Display rejected brands error.\n    if (rejectedBrands && rejectedBrands.includes(brand)) return getRejectedBrandsErrorMessage(brand);\n\n    // Display accepted brands error.\n    if (acceptedBrands && !acceptedBrands.includes(brand)) return getAcceptedBrandsErrorMessage(brand);\n\n    return;\n  };\n\n  // Use the Formik Context.\n  const { status, setStatus } = useFormikContext();\n  const serverError =\n    status?.serverErrors && name && _get(status.serverErrors, name) ? _get(status.serverErrors, name) : '';\n\n  // Use the Formik Field.\n  const [, meta, helpers] = useField({ name, validate });\n  const { error } = meta;\n  const { setValue, setTouched } = helpers;\n\n  // Set errors.\n  const hasError = !!error || !!serverError;\n  const errorText = error || serverError;\n\n  const handleChange = (event: Stripe.StripeCardElementChangeEvent) => {\n    // Remove server errors.\n    if (status?.serverErrors) setStatus({ ...status, serverErrors: { ..._set(status.serverErrors, name, '') } });\n\n    setCardDetails(event);\n    setValue(event.complete, true);\n    setTouched(true);\n  };\n\n  const handleBlur = () => setTouched(true);\n\n  return (\n    <div\n      className={classNames('lc-stripe-card-input', {\n        'lc-stripe-card-input-invalid': hasError\n      })}\n    >\n      {label && (\n        <label className=\"lc-stripe-card-input-label\" htmlFor={label}>\n          {label}\n        </label>\n      )}\n      <CardElement id={label} options={CARD_ELEMENT_OPTIONS} onChange={handleChange} onBlur={handleBlur} />\n      {hasError && <div className=\"lc-stripe-card-input-error\">{errorText}</div>}\n    </div>\n  );\n};\n"],
  "mappings": "6aAAA,oCAEA,sDACA,wDACA,gCACA,uDACA,0BACA,sCAgBA,KAAM,GAAuB,CAC3B,MAAO,CACL,KAAM,CACJ,MAAO,QACP,WAAY,uBACZ,SAAU,OACV,gBAAiB,CACf,MAAO,UACP,SAAU,QAEZ,UAAW,WAEb,QAAS,CACP,MAAO,UACP,UAAW,aAKX,EAAoB,CACxB,KAAM,OACN,WAAY,aACZ,KAAM,mBACN,SAAU,WACV,OAAQ,cACR,IAAK,MACL,SAAU,YAGC,GAA4C,CAAC,CACxD,OACA,QACA,iBACA,6BACA,iBACA,gCACI,CACJ,KAAM,CAAC,EAAa,GAAkB,IAEhC,EAAgC,AAAC,GAA2B,CAChE,KAAM,GAAe,EAErB,MAAI,GAAqB,MAAO,IAAiB,WAAa,EAAa,GAAS,EAE7E,oBAAoB,EAAkB,kBAAsB,EACjE,kBAAgB,IAAI,GAAS,EAAkB,MAAW,GAC1D,YAIE,EAAgC,AAAC,GAA2B,CAChE,KAAM,GAAe,EAErB,MAAI,GAAqB,MAAO,IAAiB,WAAa,EAAa,GAAS,EAE7E,oBAAoB,EACzB,kBAAgB,IAAI,GAAS,EAAkB,MAAW,GAC1D,yCAIE,EAAW,AAAC,GAAe,CAC/B,GAAI,CAAC,GAAe,EAAY,MAAO,MAAO,6CAE9C,KAAM,CAAE,QAAO,SAAU,EAGzB,GAAI,EAAO,MAAO,GAAM,QAGxB,GAAI,IAAU,UAGd,IAAI,GAAkB,EAAe,SAAS,GAAQ,MAAO,GAA8B,GAG3F,GAAI,GAAkB,CAAC,EAAe,SAAS,GAAQ,MAAO,GAA8B,KAMxF,CAAE,SAAQ,aAAc,IACxB,EACJ,kBAAQ,eAAgB,GAAQ,EAAK,EAAO,aAAc,GAAQ,EAAK,EAAO,aAAc,GAAQ,GAGhG,CAAC,CAAE,EAAM,GAAW,EAAS,CAAE,OAAM,aACrC,CAAE,SAAU,EACZ,CAAE,WAAU,cAAe,EAG3B,EAAW,CAAC,CAAC,GAAS,CAAC,CAAC,EACxB,EAAY,GAAS,EAErB,EAAe,AAAC,GAA+C,CAEnE,AAAI,kBAAQ,eAAc,EAAU,OAAK,GAAL,CAAa,aAAc,KAAK,EAAK,EAAO,aAAc,EAAM,QAEpG,EAAe,GACf,EAAS,EAAM,SAAU,IACzB,EAAW,KAGP,EAAa,IAAM,EAAW,IAEpC,MACE,iBAAC,MAAD,CACE,UAAW,EAAW,uBAAwB,CAC5C,+BAAgC,KAGjC,GACC,gBAAC,QAAD,CAAO,UAAU,6BAA6B,QAAS,GACpD,GAGL,gBAAC,EAAD,CAAa,GAAI,EAAO,QAAS,EAAsB,SAAU,EAAc,OAAQ,IACtF,GAAY,gBAAC,MAAD,CAAK,UAAU,8BAA8B",
  "names": []
}
