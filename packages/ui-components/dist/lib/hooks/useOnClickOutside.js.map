{
  "version": 3,
  "sources": ["../../../src/lib/hooks/useOnClickOutside.ts"],
  "sourcesContent": ["// Based on https://usehooks.com/useOnClickOutside/\nimport { useEffect } from 'react';\n\n// Hook\nexport function useOnClickOutside(\n  handler: (event: MouseEvent | TouchEvent) => void, // action to take when clicked outside\n  querySelectorAll?: string, // items to query and watch for clicks outside of\n  targetQuerySelector?: string, // items outside of the query that can be clicked on without triggering the handler\n  allowTarget?: string // items within the query that can be clicked on without triggering the handler\n): void {\n  useEffect(\n    () => {\n      // Do nothing if no querySelectorAll is passed, sometimes it might be not be defined in the parent component\n      // but React Hooks do not like to be wrapped in if-statements so we must do the check inside.\n      if (!querySelectorAll) {\n        return;\n      }\n\n      const listener = (event: MouseEvent | TouchEvent) => {\n        const eventTarget = event.target as Element;\n        if (!eventTarget) return;\n\n        const containers = Array.from(document.querySelectorAll(querySelectorAll));\n\n        if (containers.length < 1) {\n          throw new Error('querySelectorAll did not find a container for the useOnClickOutside hook');\n        }\n\n        // Do nothing if event.target is not the expected target or does not exist\n        if (targetQuerySelector && !eventTarget.closest(targetQuerySelector)) {\n          return;\n        }\n\n        // Do nothing if clicking ref's element or descendent elements\n        if (\n          (containers as Node[]).find(container => container.contains(event.target as Node)) &&\n          allowTarget &&\n          !eventTarget.closest(allowTarget)\n        ) {\n          return;\n        }\n\n        handler(event);\n      };\n\n      document.addEventListener('mousedown', listener);\n      document.addEventListener('touchstart', listener);\n\n      return () => {\n        document.removeEventListener('mousedown', listener);\n        document.removeEventListener('touchstart', listener);\n      };\n    },\n    // Add ref and handler to effect dependencies\n    // It's worth noting that because passed in handler is a new ...\n    // ... function on every render that will cause this effect ...\n    // ... callback/cleanup to run every render. It's not a big deal ...\n    // ... but to optimize you can wrap handler in useCallback before ...\n    // ... passing it into this hook.\n    [handler, querySelectorAll, allowTarget, targetQuerySelector]\n  );\n}\n"],
  "mappings": "AACA,kCAGO,WACL,EACA,EACA,EACA,EACM,CACN,EACE,IAAM,CAGJ,GAAI,CAAC,EACH,OAGF,KAAM,GAAW,AAAC,GAAmC,CACnD,KAAM,GAAc,EAAM,OAC1B,GAAI,CAAC,EAAa,OAElB,KAAM,GAAa,MAAM,KAAK,SAAS,iBAAiB,IAExD,GAAI,EAAW,OAAS,EACtB,KAAM,IAAI,OAAM,4EAIlB,AAAI,GAAuB,CAAC,EAAY,QAAQ,IAM7C,EAAsB,KAAK,GAAa,EAAU,SAAS,EAAM,UAClE,GACA,CAAC,EAAY,QAAQ,IAKvB,EAAQ,IAGV,gBAAS,iBAAiB,YAAa,GACvC,SAAS,iBAAiB,aAAc,GAEjC,IAAM,CACX,SAAS,oBAAoB,YAAa,GAC1C,SAAS,oBAAoB,aAAc,KAS/C,CAAC,EAAS,EAAkB,EAAa",
  "names": []
}
