{
  "version": 3,
  "sources": ["../../../src/lib/util/colors.ts"],
  "sourcesContent": ["import { isBrowser } from './js-helpers';\n\nexport const hexColorRegexString = '[a-fA-F0-9]';\nexport const hexColorRegex = new RegExp(hexColorRegexString);\n\nexport function getCssVar(cssVar: string, computedStyle?: CSSStyleDeclaration, alpha = 1): string {\n  if (!isBrowser()) return '';\n\n  const styles = computedStyle ? computedStyle : window.getComputedStyle(document.documentElement);\n  const color = styles.getPropertyValue(`--${cssVar}`).replace(' ', '');\n  if (!color) return '';\n  return `rgba(${color}, ${alpha})`;\n}\n\nexport function getColorVar(color: string, alpha = 1) {\n  const cssVar = `lc-color-${color}`;\n\n  if (!getCssVar(cssVar)) return '';\n  return getCssVar(cssVar, window.getComputedStyle(document.documentElement), alpha);\n}\n\nexport function isColor(color: string): boolean {\n  const s = new Option().style;\n  s.color = color;\n  return s.color !== '';\n}\n\nexport function getHexColor(colorStr: string): string {\n  if (!isBrowser()) return '';\n\n  const a = document.createElement('div');\n  a.style.color = colorStr;\n  const colorArray = window.getComputedStyle(document.body.appendChild(a)).color?.match(/\\d+/g);\n  if (!colorArray) {\n    return '';\n  }\n  const colors = colorArray.map(c => parseInt(c, 10));\n  document.body.removeChild(a);\n  return colors.length >= 3\n    ? // tslint:disable-next-line: no-bitwise\n      '#' + ((1 << 24) + (colors[0] << 16) + (colors[1] << 8) + colors[2]).toString(16).substr(1)\n    : '';\n}\n\nexport function pickTextColorBasedOnBgColorSimple(\n  bgColor: string,\n  lightColor = '#ffffff',\n  darkColor = '#000000'\n): string {\n  const color = bgColor.charAt(0) === '#' ? bgColor.substring(1, 7) : bgColor;\n  const r = parseInt(color.substring(0, 2), 16); // hexToR\n  const g = parseInt(color.substring(2, 4), 16); // hexToG\n  const b = parseInt(color.substring(4, 6), 16); // hexToB\n  return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? darkColor : lightColor;\n}\n\n// Src: https://www.sitepoint.com/javascript-generate-lighter-darker-color/\nexport function lightenDarkenColor(hex: string, lum = -0.2): string {\n  // validate hex string\n  hex = String(hex).replace(/[^0-9a-f]/gi, '');\n  if (hex.length < 6) {\n    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n  }\n  lum = lum || 0;\n\n  // convert to decimal and change luminosity\n  // tslint:disable-next-line: one-variable-per-declaration\n  let rgb = '#',\n    c,\n    i;\n  for (i = 0; i < 3; i++) {\n    c = parseInt(hex.substr(i * 2, 2), 16);\n    c = Math.round(Math.min(Math.max(0, c + c * lum), 255)).toString(16);\n    rgb += ('00' + c).substr(c.length);\n  }\n\n  return rgb;\n}\n\nexport function isHexColor(color: string): boolean {\n  return new RegExp(`^[#]*(${hexColorRegexString}{6}|${hexColorRegexString}{3})$`, 'i').test(color);\n}\n\nexport function isRgbColor(color: string): boolean {\n  return new RegExp(['rgb', 'rgba', ','].join('|')).test(color);\n}\n\nexport function stripRgb(color: string): string {\n  return color.replace(/[^\\d,.]/g, '');\n}\n\nexport function rgbToHex(color: string) {\n  if (isHexColor(color) || !isRgbColor(color)) return color;\n\n  color = stripRgb(color);\n  const colorArray = color.replace(' ', '').split(',');\n  const colors = colorArray.map(c => parseInt(c, 10));\n\n  return '#' + ((1 << 24) + (colors[0] << 16) + (colors[1] << 8) + colors[2]).toString(16).slice(1);\n}\n\nexport function hexToRgb(color: string) {\n  if (isRgbColor(color) || !isHexColor(color)) return color;\n\n  let r = `0`;\n  let g = `0`;\n  let b = `0`;\n\n  if (color.length == 4) {\n    // 3 digits\n    r = `0x${color[1]}${color[1]}`;\n    g = `0x${color[2]}${color[2]}`;\n    b = `0x${color[3]}${color[3]}`;\n  } else if (color.length == 7) {\n    // 6 digits\n    r = `0x${color[1]}${color[2]}`;\n    g = `0x${color[3]}${color[4]}`;\n    b = `0x${color[5]}${color[6]}`;\n  }\n\n  return `${+r}, ${+g}, ${+b}`;\n}\n"],
  "mappings": "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",
  "names": []
}
