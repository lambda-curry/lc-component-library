{
  "version": 3,
  "sources": ["../../../src/lib/inputs/InputBase.tsx"],
  "sourcesContent": ["import React, { ChangeEvent, FocusEvent, ReactNode, FC } from 'react';\nimport TextField, { OutlinedTextFieldProps } from '@material-ui/core/TextField';\nimport { FormikProps } from 'formik';\nimport classNames from 'classnames';\nimport { get as _get, set as _set } from 'lodash';\nimport { InputAdornment } from '@material-ui/core';\nimport './input.css';\n\ntype LabelPlacements = 'inset' | 'above';\n\nexport interface InputConfig {\n  labelPlacement?: 'inset' | 'above';\n  safeName?: boolean;\n  inputBorderWhite?: boolean;\n  shrinkLabel?: boolean;\n}\n\nexport type InputProps = Omit<OutlinedTextFieldProps, 'variant' | 'prefix'> & {\n  name: string;\n  prefix?: ReactNode;\n  suffix?: ReactNode;\n  formikProps?: Partial<FormikProps<any>>;\n  labelPlacement?: LabelPlacements;\n  variant?: 'outlined' | 'standard' | 'filled'; // Don't remove any typing because this breaks the build. - Jake\n  inputConfig?: InputConfig;\n};\n\nexport const InputBase: FC<InputProps> = ({\n  name,\n  id,\n  className,\n  formikProps,\n  prefix,\n  suffix,\n  label,\n  labelPlacement = 'inset',\n  variant = 'outlined',\n  inputConfig,\n  ...props\n}) => {\n  const config: InputConfig = {\n    labelPlacement,\n    ...formikProps?.status?.formConfig,\n    ...inputConfig\n  };\n\n  const fieldValue = formikProps ? _get(formikProps?.values, name) : props.value;\n  const fieldError =\n    formikProps?.errors && name && _get(formikProps.touched, name) ? _get(formikProps.errors, name) : '';\n  const serverError =\n    formikProps?.status?.serverErrors && name && _get(formikProps.status.serverErrors, name)\n      ? _get(formikProps.status.serverErrors, name)\n      : '';\n  const hasError = !!fieldError || !!serverError || props.error;\n  const helperText = fieldError || serverError || props.helperText;\n\n  const InputProps: any = {\n    startAdornment: prefix ? <InputAdornment position=\"start\">{prefix}</InputAdornment> : false,\n    endAdornment: suffix ? <InputAdornment position=\"end\">{suffix}</InputAdornment> : false,\n    ...props.InputProps // Note: don't remove these, passing `InputProps` in here allows InputSelect to work correctly\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    // Remove server errors.\n    if (formikProps?.setStatus && formikProps?.status?.serverErrors)\n      formikProps.setStatus({\n        ...formikProps?.status,\n        serverErrors: { ..._set(formikProps.status.serverErrors, name, '') }\n      });\n\n    if (formikProps?.handleChange) formikProps.handleChange(event);\n    if (typeof props.onChange === 'function') props.onChange(event);\n  };\n\n  const handleBlur = (event: FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    if (formikProps?.handleBlur) formikProps.handleBlur(event);\n    if (typeof props.onBlur === 'function') props.onBlur(event);\n  };\n\n  const hasLabelAbove = label && config.labelPlacement === 'above';\n\n  return (\n    <div\n      className={classNames('lc-input-wrapper', {\n        'lc-input-label-above': hasLabelAbove,\n        'lc-input-border-white': config.inputBorderWhite\n      })}\n    >\n      {hasLabelAbove && (\n        <label className=\"lc-input-label\" htmlFor={id || name}>\n          {label}\n        </label>\n      )}\n      <TextField\n        name={config.safeName ? `['${name}']` : name}\n        id={id || name}\n        label={config.labelPlacement === 'inset' ? label : false}\n        size=\"small\"\n        {...props}\n        InputProps={InputProps}\n        error={hasError}\n        helperText={helperText}\n        className={classNames(className, 'lc-input')}\n        value={fieldValue}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        variant={variant}\n        InputLabelProps={{ shrink: config.shrinkLabel, ...props.InputLabelProps }}\n      />\n      {config?.safeName && (\n        <input\n          type=\"hidden\"\n          name={name}\n          defaultValue={\n            typeof formikProps?.values[name] === 'object'\n              ? JSON.stringify(formikProps?.values[name])\n              : formikProps?.values[name]\n          }\n        />\n      )}\n    </div>\n  );\n};\n"],
  "mappings": "+kBAAA,qBACA,2CAEA,0BACA,sCACA,mDACA,oBAqBO,KAAM,IAA4B,AAAC,GAYpC,CAZoC,QACxC,QACA,KACA,YACA,cACA,SACA,SACA,QACA,iBAAiB,QACjB,UAAU,WACV,eAVwC,EAWrC,IAXqC,EAWrC,CAVH,OACA,KACA,YACA,cACA,SACA,SACA,QACA,iBACA,UACA,gBArCF,QAwCE,KAAM,GAAsB,KAC1B,kBACG,oBAAa,SAAb,cAAqB,YACrB,GAGC,EAAa,EAAc,EAAK,iBAAa,OAAQ,GAAQ,EAAM,MACnE,EACJ,kBAAa,SAAU,GAAQ,EAAK,EAAY,QAAS,GAAQ,EAAK,EAAY,OAAQ,GAAQ,GAC9F,EACJ,qBAAa,SAAb,cAAqB,eAAgB,GAAQ,EAAK,EAAY,OAAO,aAAc,GAC/E,EAAK,EAAY,OAAO,aAAc,GACtC,GACA,EAAW,CAAC,CAAC,GAAc,CAAC,CAAC,GAAe,EAAM,MAClD,EAAa,GAAc,GAAe,EAAM,WAEhD,EAAkB,GACtB,eAAgB,EAAS,gBAAC,EAAD,CAAgB,SAAS,SAAS,GAA2B,GACtF,aAAc,EAAS,gBAAC,EAAD,CAAgB,SAAS,OAAO,GAA2B,IAC/E,EAAM,YAGL,EAAe,AAAC,GAA+D,CA9DvF,MAgEI,AAAI,kBAAa,YAAa,qBAAa,SAAb,cAAqB,eACjD,EAAY,UAAU,OACjB,iBAAa,QADI,CAEpB,aAAc,KAAK,EAAK,EAAY,OAAO,aAAc,EAAM,QAG/D,kBAAa,eAAc,EAAY,aAAa,GACpD,MAAO,GAAM,UAAa,YAAY,EAAM,SAAS,IAGrD,EAAa,AAAC,GAA8D,CAChF,AAAI,kBAAa,aAAY,EAAY,WAAW,GAChD,MAAO,GAAM,QAAW,YAAY,EAAM,OAAO,IAGjD,EAAgB,GAAS,EAAO,iBAAmB,QAEzD,MACE,iBAAC,MAAD,CACE,UAAW,EAAW,mBAAoB,CACxC,uBAAwB,EACxB,wBAAyB,EAAO,oBAGjC,GACC,gBAAC,QAAD,CAAO,UAAU,iBAAiB,QAAS,GAAM,GAC9C,GAGL,gBAAC,EAAD,KACE,KAAM,EAAO,SAAW,KAAK,MAAW,EACxC,GAAI,GAAM,EACV,MAAO,EAAO,iBAAmB,QAAU,EAAQ,GACnD,KAAK,SACD,GALN,CAME,WAAY,EACZ,MAAO,EACP,WAAY,EACZ,UAAW,EAAW,EAAW,YACjC,MAAO,EACP,SAAU,EACV,OAAQ,EACR,QAAS,EACT,gBAAiB,GAAE,OAAQ,EAAO,aAAgB,EAAM,oBAEzD,kBAAQ,WACP,gBAAC,QAAD,CACE,KAAK,SACL,KAAM,EACN,aACE,MAAO,kBAAa,OAAO,KAAU,SACjC,KAAK,UAAU,iBAAa,OAAO,IACnC,iBAAa,OAAO",
  "names": []
}
