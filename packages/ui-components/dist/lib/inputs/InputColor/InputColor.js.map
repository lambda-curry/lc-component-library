{
  "version": 3,
  "sources": ["../../../../src/lib/inputs/InputColor/InputColor.tsx"],
  "sourcesContent": ["import React, { FC, ChangeEvent } from 'react';\nimport classNames from 'classnames';\nimport { InputAdornment } from '@material-ui/core';\nimport MaskedInput from 'react-text-mask';\nimport { InputText } from '../InputText/InputText';\nimport { InputProps } from '../InputBase';\nimport { isHexColor, hexColorRegex } from '../../util/colors';\n\nimport './input-color.css';\n\ninterface TextMaskCustomProps {\n  mask?: (string | RegExp)[];\n  inputRef: (ref: HTMLInputElement | null) => void;\n}\n\nexport interface InputColorProps extends InputProps {\n  onPickerChange?: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst InputColorMask: FC<TextMaskCustomProps> = props => {\n  const { inputRef, mask, ...rest } = props;\n\n  return (\n    <MaskedInput\n      mask={['#', ...new Array(6).fill(hexColorRegex, 0)]}\n      {...rest}\n      ref={(ref: any) => {\n        inputRef(ref ? ref.inputElement : null);\n      }}\n      placeholderChar={'\\u2000'}\n    />\n  );\n};\n\nexport const InputColor: FC<InputColorProps> = ({\n  className,\n  placeholder = 'Pick a color',\n  onPickerChange,\n  ...props\n}) => {\n  const fieldProps = props.formikProps?.getFieldProps ? props.formikProps.getFieldProps(props.name) : null;\n  const fieldHelpers = props.formikProps?.getFieldHelpers ? props.formikProps.getFieldHelpers(props.name) : null;\n  const fieldValue = fieldProps?.value || props.value;\n  const isValidColor = isHexColor(fieldValue);\n\n  const handlePickerChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (fieldHelpers) fieldHelpers.setValue(event.target.value);\n    if (onPickerChange) onPickerChange(event);\n  };\n\n  return (\n    <InputText\n      {...props}\n      labelPlacement=\"above\"\n      placeholder={placeholder}\n      className={classNames('lc-input-color', { 'lc-input-color-invalid-hex': !isValidColor }, className)}\n      InputProps={{\n        ...props.InputProps,\n        inputComponent: InputColorMask as any,\n        startAdornment: (\n          <InputAdornment position=\"start\">\n            <div className=\"lc-input-color-picker\">\n              <input\n                name={`_${props.name}_picker`}\n                type=\"color\"\n                className=\"lc-input-color-picker-input\"\n                onChange={handlePickerChange}\n                value={isValidColor ? fieldValue : '#000000'} // Set a valid hex value as the default to avoid console warnings.\n              />\n            </div>\n          </InputAdornment>\n        )\n      }}\n    />\n  );\n};\n"],
  "mappings": "+kBAAA,qBACA,0BACA,mDACA,+BACA,mDAEA,kEAEA,0BAWA,KAAM,GAA0C,GAAS,CACvD,KAAoC,KAA5B,YAAU,QAAkB,EAAT,IAAS,EAAT,CAAnB,WAAU,SAElB,MACE,iBAAC,EAAD,KACE,KAAM,CAAC,IAAK,GAAG,GAAI,OAAM,GAAG,KAAK,EAAe,KAC5C,GAFN,CAGE,IAAK,AAAC,GAAa,CACjB,EAAS,EAAM,EAAI,aAAe,OAEpC,gBAAiB,aAKV,EAAkC,AAAC,GAK1C,CAL0C,QAC9C,aACA,cAAc,eACd,kBAH8C,EAI3C,IAJ2C,EAI3C,CAHH,YACA,cACA,mBArCF,QAwCE,KAAM,GAAa,MAAM,cAAN,cAAmB,eAAgB,EAAM,YAAY,cAAc,EAAM,MAAQ,KAC9F,EAAe,MAAM,cAAN,cAAmB,iBAAkB,EAAM,YAAY,gBAAgB,EAAM,MAAQ,KACpG,EAAa,kBAAY,QAAS,EAAM,MACxC,EAAe,EAAW,GAE1B,EAAqB,AAAC,GAAyC,CACnE,AAAI,GAAc,EAAa,SAAS,EAAM,OAAO,OACjD,GAAgB,EAAe,IAGrC,MACE,iBAAC,EAAD,OACM,GADN,CAEE,eAAe,QACf,YAAa,EACb,UAAW,EAAW,iBAAkB,CAAE,6BAA8B,CAAC,GAAgB,GACzF,WAAY,OACP,EAAM,YADC,CAEV,eAAgB,EAChB,eACE,gBAAC,EAAD,CAAgB,SAAS,SACvB,gBAAC,MAAD,CAAK,UAAU,yBACb,gBAAC,QAAD,CACE,KAAM,IAAI,EAAM,cAChB,KAAK,QACL,UAAU,8BACV,SAAU,EACV,MAAO,EAAe,EAAa",
  "names": []
}
