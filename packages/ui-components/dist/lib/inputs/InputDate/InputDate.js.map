{
  "version": 3,
  "sources": ["../../../../src/lib/inputs/InputDate/InputDate.tsx"],
  "sourcesContent": ["import React, { FC } from 'react';\nimport { DatePicker, DatePickerProps, LocalizationProvider } from '@material-ui/pickers';\nimport { InputText } from '../InputText/InputText';\nimport { InputProps } from '../InputBase';\nimport LuxonUtils from '@date-io/luxon';\nimport { DateTime } from 'luxon';\nimport { get as _get } from 'lodash';\nimport classNames from 'classnames';\n\nexport type InputDateProps = Omit<InputProps, 'onChange'> & {\n  value?: Date | string;\n  onChange?: (date: Date | string | null) => void;\n  inputFormat?: string;\n  valueFormat?: string;\n  disablePast?: boolean;\n  className?: string;\n  datePickerProps?: Partial<DatePickerProps>;\n};\n\nconst toDateTime = (value: string | Date, format?: string): DateTime | null => {\n  if (format && typeof value === 'string') return DateTime.fromFormat(value, format);\n  if (value instanceof Date) return DateTime.fromJSDate(value);\n  return null;\n};\n\nconst fromDateTime = (dt: DateTime | null, format?: string): Date | string | null => {\n  if (!dt) return null;\n  if (format) return dt.toFormat(format);\n  return dt.toJSDate();\n};\n\nexport const InputDate: FC<InputDateProps> = ({\n  label = 'Select Date',\n  value,\n  onChange,\n  formikProps,\n  inputFormat = 'LL/dd/yyyy',\n  disablePast = false,\n  valueFormat,\n  className,\n  datePickerProps = {},\n  ...props\n}) => {\n  const initialFieldValue = formikProps ? _get(formikProps?.values, props.name, '') : value;\n\n  return (\n    <LocalizationProvider dateAdapter={LuxonUtils}>\n      <DatePicker\n        {...datePickerProps}\n        label={label}\n        value={initialFieldValue ? toDateTime(initialFieldValue, valueFormat) : null}\n        onChange={(updatedDate: unknown, keyboardInputValue?: string | undefined) => {\n          const updatedValue = fromDateTime(updatedDate as DateTime | null, valueFormat);\n          if (formikProps?.setFieldValue) formikProps.setFieldValue(props.name, updatedValue);\n          if (typeof onChange === 'function') onChange(updatedValue);\n        }}\n        inputFormat={valueFormat || inputFormat}\n        disablePast={disablePast}\n        renderInput={renderProps => (\n          <InputText\n            {...(renderProps as InputProps)}\n            {...props}\n            formikProps={formikProps}\n            className={classNames('lc-input-date', className)}\n          />\n        )}\n      />\n    </LocalizationProvider>\n  );\n};\n"],
  "mappings": "+kBAAA,qBACA,4EACA,mDAEA,8BACA,iCACA,6BACA,0BAYA,KAAM,GAAa,CAAC,EAAsB,IACpC,GAAU,MAAO,IAAU,SAAiB,EAAS,WAAW,EAAO,GACvE,YAAiB,MAAa,EAAS,WAAW,GAC/C,KAGH,EAAe,CAAC,EAAqB,IACpC,EACD,EAAe,EAAG,SAAS,GACxB,EAAG,WAFM,KAKL,EAAgC,AAAC,GAWxC,CAXwC,QAC5C,SAAQ,cACR,QACA,WACA,cACA,cAAc,aACd,cAAc,GACd,cACA,YACA,kBAAkB,IAT0B,EAUzC,IAVyC,EAUzC,CATH,QACA,QACA,WACA,cACA,cACA,cACA,cACA,YACA,oBAGA,KAAM,GAAoB,EAAc,EAAK,iBAAa,OAAQ,EAAM,KAAM,IAAM,EAEpF,MACE,iBAAC,EAAD,CAAsB,YAAa,GACjC,gBAAC,EAAD,OACM,GADN,CAEE,MAAO,EACP,MAAO,EAAoB,EAAW,EAAmB,GAAe,KACxE,SAAU,CAAC,EAAsB,IAA4C,CAC3E,KAAM,GAAe,EAAa,EAAgC,GAClE,AAAI,kBAAa,gBAAe,EAAY,cAAc,EAAM,KAAM,GAClE,MAAO,IAAa,YAAY,EAAS,IAE/C,YAAa,GAAe,EAC5B,YAAa,EACb,YAAa,GACX,gBAAC,EAAD,SACO,GACD,GAFN,CAGE,YAAa,EACb,UAAW,EAAW,gBAAiB",
  "names": []
}
