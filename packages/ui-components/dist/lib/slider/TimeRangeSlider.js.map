{
  "version": 3,
  "sources": ["../../../src/lib/slider/TimeRangeSlider.tsx"],
  "sourcesContent": ["import React, { FC, FormEvent, FocusEvent } from 'react';\nimport { Slider, SliderProps } from './Slider';\nimport { DateTime, Interval, LocaleOptions } from 'luxon';\nimport classNames from 'classnames';\nimport { isNullOrUndefined } from '../util/js-helpers';\n\nexport interface TimeRange {\n  startTime: string; // 00:00 - 24:00\n  endTime: string;\n}\n\nconst intervalStartInMinutes = (interval: Interval) => interval.start.toSeconds() / 60;\nconst intervalEndInMinutes = (interval: Interval) => interval.end.toSeconds() / 60;\nconst dateTimeFromValue = (value: string) => DateTime.fromFormat(value, 'HH:mm');\nconst timeRangeFromRangeValue: (rangeValue: number[], data: { minTime: string; min: number }) => TimeRange = (\n  rangeValue,\n  { minTime, min }\n) => {\n  const localeStartTimeString = DateTime.fromSeconds(rangeValue[0] * 60).toLocaleString(\n    DateTime.TIME_24_SIMPLE as LocaleOptions & Intl.DateTimeFormatOptions\n  );\n  const localeEndTimeString = DateTime.fromSeconds(rangeValue[1] * 60).toLocaleString(\n    DateTime.TIME_24_SIMPLE as LocaleOptions & Intl.DateTimeFormatOptions\n  );\n  const [minTimeHours] = minTime.split(':');\n  const [startTimeHours, startTimeMinutes] = localeStartTimeString.split(':');\n  const [endTimeHours, endTimeMinutes] = localeEndTimeString.split(':');\n\n  const isStartTimeBefore1AM = startTimeHours === '24' && minTimeHours === '00' && rangeValue[0] - min < 60;\n  const isEndTimeBefore1AM = endTimeHours === '24' && minTimeHours === '00' && rangeValue[1] - min < 60;\n\n  const startTime = `${isStartTimeBefore1AM ? '00' : startTimeHours}:${startTimeMinutes}`;\n  const endTime = `${isEndTimeBefore1AM ? '00' : endTimeHours}:${endTimeMinutes}`;\n\n  return { startTime, endTime };\n};\nconst labelFromRangeMinutes = (rangeMinutes: number) => {\n  const dateTime = DateTime.fromSeconds(rangeMinutes * 60);\n  return dateTime.toLocaleString(DateTime.TIME_SIMPLE as LocaleOptions & Intl.DateTimeFormatOptions);\n};\n\nexport interface TimeRangeSliderProps extends Omit<SliderProps, 'value' | 'onChange'> {\n  value?: TimeRange;\n  onChange?: (event: FormEvent<any>, value: TimeRange) => void;\n  minuteInterval?: number;\n  minTime?: string;\n  maxTime?: string;\n}\n\nexport const TimeRangeSlider: FC<TimeRangeSliderProps> = ({\n  className,\n  name,\n  value,\n  minTime = '00:00',\n  maxTime = '24:00',\n  valueLabelDisplay = 'on',\n  minuteInterval = 15,\n  formikProps,\n  onChange,\n  onBlur,\n  ...sliderProps\n}) => {\n  const sliderValue = isNullOrUndefined(formikProps?.values[name]) ? value : formikProps?.values[name];\n\n  if (!sliderValue || !(sliderValue as TimeRange).startTime || !(sliderValue as TimeRange).endTime) {\n    throw new Error(\n      `Time Range Slider expects a value of type TimeRange {\n        startTime: string; // 00:00 - 24:00\n        endTime: string;\n      }`\n    );\n  }\n\n  const minDateTime = dateTimeFromValue(minTime);\n  const maxDateTime = dateTimeFromValue(maxTime);\n  const rangeInterval = Interval.fromDateTimes(minDateTime, maxDateTime);\n  const valueInterval = Interval.fromDateTimes(\n    dateTimeFromValue(sliderValue.startTime),\n    dateTimeFromValue(sliderValue.endTime)\n  );\n\n  const min = intervalStartInMinutes(rangeInterval);\n  const max = intervalEndInMinutes(rangeInterval);\n\n  const rangeValue = [intervalStartInMinutes(valueInterval), intervalEndInMinutes(valueInterval)];\n\n  const handleChange: (event: FormEvent<any>, value: number | number[]) => void = (event, rangeValue) => {\n    if (!rangeValue) return;\n    const timeRange: TimeRange = timeRangeFromRangeValue(rangeValue as number[], { minTime, min });\n    if (typeof onChange === 'function') onChange(event as FormEvent<any>, timeRange);\n\n    if (formikProps) formikProps.setFieldValue(name, timeRange);\n  };\n\n  const handleBlur: (event: FocusEvent<Element>) => void = event => {\n    // Note: we need to set the id here, because the Mui slider is not a normal input\n    event.target.id = name;\n    if (typeof onBlur === 'function') onBlur(event);\n    if (formikProps) formikProps.handleBlur(event);\n  };\n\n  return (\n    <Slider\n      {...sliderProps}\n      className={classNames(className, 'lc-time-range-slider')}\n      name={name}\n      value={rangeValue}\n      min={min}\n      max={max}\n      step={minuteInterval}\n      valueLabelDisplay={valueLabelDisplay}\n      valueLabelFormat={minutes => labelFromRangeMinutes(minutes)}\n      // Note: Mui types were expecting onChange?: (((event: ChangeEvent<{}>, value: number | number[]) => void) & ((event: FormEvent<HTMLSpanElement>) => void)) | undefined\n      // but ((event: FormEvent<HTMLSpanElement>) => void)) is coming from an extended value and I'm not sure what to do about that. - Jake 10/05/2020\n      onChange={handleChange}\n      onBlur={handleBlur}\n    />\n  );\n};\n"],
  "mappings": "+kBAAA,qBACA,kCACA,+CACA,0BACA,uDAOA,KAAM,GAAyB,AAAC,GAAuB,EAAS,MAAM,YAAc,GAC9E,EAAuB,AAAC,GAAuB,EAAS,IAAI,YAAc,GAC1E,EAAoB,AAAC,GAAkB,EAAS,WAAW,EAAO,SAClE,EAAuG,CAC3G,EACA,CAAE,UAAS,SACR,CACH,KAAM,GAAwB,EAAS,YAAY,EAAW,GAAK,IAAI,eACrE,EAAS,gBAEL,EAAsB,EAAS,YAAY,EAAW,GAAK,IAAI,eACnE,EAAS,gBAEL,CAAC,GAAgB,EAAQ,MAAM,KAC/B,CAAC,EAAgB,GAAoB,EAAsB,MAAM,KACjE,CAAC,EAAc,GAAkB,EAAoB,MAAM,KAE3D,EAAuB,IAAmB,MAAQ,IAAiB,MAAQ,EAAW,GAAK,EAAM,GACjG,EAAqB,IAAiB,MAAQ,IAAiB,MAAQ,EAAW,GAAK,EAAM,GAE7F,EAAY,GAAG,EAAuB,KAAO,KAAkB,IAC/D,EAAU,GAAG,EAAqB,KAAO,KAAgB,IAE/D,MAAO,CAAE,YAAW,YAEhB,EAAwB,AAAC,GAEtB,AADU,EAAS,YAAY,EAAe,IACrC,eAAe,EAAS,aAW7B,GAA4C,AAAC,GAYpD,CAZoD,QACxD,aACA,OACA,QACA,UAAU,QACV,UAAU,QACV,oBAAoB,KACpB,iBAAiB,GACjB,cACA,WACA,UAVwD,EAWrD,IAXqD,EAWrD,CAVH,YACA,OACA,QACA,UACA,UACA,oBACA,iBACA,cACA,WACA,WAGA,KAAM,GAAc,EAAkB,iBAAa,OAAO,IAAS,EAAQ,iBAAa,OAAO,GAE/F,GAAI,CAAC,GAAe,CAAE,EAA0B,WAAa,CAAE,EAA0B,QACvF,KAAM,IAAI,OACR;AAAA;AAAA;AAAA,UAOJ,KAAM,GAAc,EAAkB,GAChC,EAAc,EAAkB,GAChC,EAAgB,EAAS,cAAc,EAAa,GACpD,EAAgB,EAAS,cAC7B,EAAkB,EAAY,WAC9B,EAAkB,EAAY,UAG1B,EAAM,EAAuB,GAC7B,EAAM,EAAqB,GAE3B,EAAa,CAAC,EAAuB,GAAgB,EAAqB,IAE1E,EAA0E,CAAC,EAAO,IAAe,CACrG,GAAI,CAAC,EAAY,OACjB,KAAM,GAAuB,EAAwB,EAAwB,CAAE,UAAS,QACxF,AAAI,MAAO,IAAa,YAAY,EAAS,EAAyB,GAElE,GAAa,EAAY,cAAc,EAAM,IAG7C,EAAmD,GAAS,CAEhE,EAAM,OAAO,GAAK,EACd,MAAO,IAAW,YAAY,EAAO,GACrC,GAAa,EAAY,WAAW,IAG1C,MACE,iBAAC,EAAD,OACM,GADN,CAEE,UAAW,EAAW,EAAW,wBACjC,KAAM,EACN,MAAO,EACP,IAAK,EACL,IAAK,EACL,KAAM,EACN,kBAAmB,EACnB,iBAAkB,GAAW,EAAsB,GAGnD,SAAU,EACV,OAAQ",
  "names": []
}
