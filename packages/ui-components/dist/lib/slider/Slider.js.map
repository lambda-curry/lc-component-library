{
  "version": 3,
  "sources": ["../../../src/lib/slider/Slider.tsx"],
  "sourcesContent": ["import React, { FC, ChangeEvent, FocusEvent, ElementType, HTMLAttributes, ReactNode } from 'react';\nimport { Mark, Slider as MuiSlider, ValueLabelProps } from '@material-ui/core';\nimport classNames from 'classnames';\nimport { FormikProps } from 'formik';\nimport './slider.css';\nimport { isNullOrUndefined } from '../util/js-helpers';\n\nexport interface SliderProps {\n  id?: string;\n  className?: string;\n  name: string;\n  label?: string;\n  formikProps?: FormikProps<any>;\n  'aria-label'?: string;\n  'aria-labelledby'?: string;\n  'aria-valuetext'?: string;\n  color?: 'primary' | 'secondary';\n  defaultValue?: number | number[];\n  disabled?: boolean;\n  getAriaLabel?: (index: number) => string;\n  getAriaValueText?: (value: number, index: number) => string;\n  marks?: boolean | Mark[];\n  max?: number;\n  min?: number;\n  onChange?: (event: ChangeEvent<any>, value: number | number[]) => void;\n  onBlur?: (event: FocusEvent) => void;\n  onChangeCommitted?: (event: ChangeEvent<any>, value: number | number[]) => void;\n  orientation?: 'horizontal' | 'vertical';\n  step?: number | null;\n  scale?: (value: number) => number;\n  ThumbComponent?: ElementType<HTMLAttributes<HTMLSpanElement>>;\n  track?: 'normal' | false | 'inverted';\n  value?: number | number[];\n  ValueLabelComponent?: ElementType<ValueLabelProps>;\n  valueLabelDisplay?: 'on' | 'auto' | 'off';\n  valueLabelFormat?: string | ((value: number, index: number) => ReactNode);\n}\n\nexport const Slider: FC<SliderProps> = ({\n  id,\n  name,\n  valueLabelDisplay = 'auto',\n  label,\n  className,\n  onChange,\n  onBlur,\n  formikProps,\n  value,\n  ...sliderProps\n}) => {\n  const handleChange: (event: ChangeEvent<any>, value: any) => void = (event, newValue) => {\n    if (typeof onChange === 'function') onChange(event, newValue);\n    if (formikProps) formikProps.setFieldValue(name, newValue);\n  };\n\n  const handleBlur: (event: FocusEvent<HTMLSpanElement>) => void = event => {\n    // Note: we need to set the id here, because the Mui slider is not a normal input\n    event.target.id = name;\n    if (typeof onBlur === 'function') onBlur(event);\n    if (formikProps) formikProps.handleBlur(event);\n  };\n\n  const defaultValue = isNullOrUndefined(formikProps?.values[name]) ? value : formikProps?.values[name];\n\n  return (\n    <div className={classNames('lc-slider', className)}>\n      {label && <label htmlFor={id || name}>{label}</label>}\n      <MuiSlider\n        {...sliderProps}\n        id={id || name}\n        valueLabelDisplay={valueLabelDisplay}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        defaultValue={defaultValue}\n      />\n    </div>\n  );\n};\n"],
  "mappings": "+kBAAA,qBACA,2CACA,0BAEA,qBACA,uDAiCO,KAAM,GAA0B,AAAC,GAWlC,CAXkC,QACtC,MACA,OACA,oBAAoB,OACpB,QACA,YACA,WACA,SACA,cACA,SATsC,EAUnC,IAVmC,EAUnC,CATH,KACA,OACA,oBACA,QACA,YACA,WACA,SACA,cACA,UAGA,KAAM,GAA8D,CAAC,EAAO,IAAa,CACvF,AAAI,MAAO,IAAa,YAAY,EAAS,EAAO,GAChD,GAAa,EAAY,cAAc,EAAM,IAG7C,EAA2D,GAAS,CAExE,EAAM,OAAO,GAAK,EACd,MAAO,IAAW,YAAY,EAAO,GACrC,GAAa,EAAY,WAAW,IAGpC,EAAe,EAAkB,iBAAa,OAAO,IAAS,EAAQ,iBAAa,OAAO,GAEhG,MACE,iBAAC,MAAD,CAAK,UAAW,EAAW,YAAa,IACrC,GAAS,gBAAC,QAAD,CAAO,QAAS,GAAM,GAAO,GACvC,gBAAC,EAAD,OACM,GADN,CAEE,GAAI,GAAM,EACV,kBAAmB,EACnB,SAAU,EACV,OAAQ,EACR,aAAc",
  "names": []
}
