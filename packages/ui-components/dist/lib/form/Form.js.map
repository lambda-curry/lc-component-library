{
  "version": 3,
  "sources": ["../../../src/lib/form/Form.tsx"],
  "sourcesContent": ["import React, { FC, Reducer, useReducer, ReactElement, Dispatch } from 'react';\nimport { Formik, FormikConfig, FormikProps, Form as FormikForm, useFormikContext } from 'formik';\nimport classNames from 'classnames';\nimport { useOnClickOutside } from '../hooks';\nimport { Modal, ModalHeader, ModalActions } from '../modal';\nimport { formReducer, FormReducerAction, FormReducerState } from './Form.helpers';\nimport { InputConfig } from '../inputs/InputBase';\nimport './form.css';\nimport { Button } from '../buttons/Button';\nimport { ButtonPrimary } from '../buttons/ButtonPrimary';\nimport ReactModal from 'react-modal';\n\nexport interface FormConfig extends InputConfig {}\n\nexport interface UnsavedChangesModalProps extends Partial<ReactModal.Props> {\n  modalTitle?: string;\n  modalContent?: string;\n  modalPrimaryButtonText?: string;\n  modalCloseButtonText?: string;\n}\n\nexport interface UnsavedChangesConfig {\n  containerQuerySelectorAll?: string;\n  targetQuerySelector?: string;\n  modalProps?: UnsavedChangesModalProps;\n}\n\nexport interface FormProps<T> extends FormikConfig<T> {\n  className?: string;\n  confirmUnsavedChanges?: boolean;\n  unsavedChangesConfig?: UnsavedChangesConfig;\n  withoutFormElement?: boolean;\n  formConfig?: FormConfig;\n  children: (formikProps: FormikProps<T>) => ReactElement;\n}\n\nconst FormContent: FC<{\n  className?: string;\n  state: FormReducerState;\n  dispatch: Dispatch<FormReducerAction>;\n  withoutFormElement?: boolean;\n  confirmUnsavedChanges?: boolean;\n  unsavedChangesConfig: UnsavedChangesConfig;\n}> = ({ className, state, dispatch, withoutFormElement, confirmUnsavedChanges, unsavedChangesConfig, ...rest }) => {\n  const formContext = useFormikContext();\n\n  const handleClickOutside = (event: MouseEvent | TouchEvent) => {\n    if (!confirmUnsavedChanges || !event.target || !state.shouldCheckForUnsavedChanges || !formContext.dirty) return;\n\n    event.preventDefault();\n    dispatch({ name: 'openModal', payload: 'unsavedChangesModal' });\n    dispatch({ name: 'setCapturedUnsavedChangesEvent', payload: event });\n  };\n\n  useOnClickOutside(\n    handleClickOutside,\n    unsavedChangesConfig.containerQuerySelectorAll\n      ? `${unsavedChangesConfig.containerQuerySelectorAll}, #lc-unsaved-changes-modal`\n      : undefined,\n    unsavedChangesConfig.targetQuerySelector,\n    '[data-lc-trigger-unsaved-changes]'\n  );\n\n  return withoutFormElement ? (\n    <div className={classNames(className, 'lc-form')} {...rest} />\n  ) : (\n    <FormikForm className={classNames(className, 'lc-form')} {...rest} />\n  );\n};\n\nexport function Form<T>({\n  className,\n  children,\n  withoutFormElement,\n  confirmUnsavedChanges,\n  unsavedChangesConfig = {},\n  formConfig,\n  ...props\n}: FormProps<T>): ReactElement {\n  unsavedChangesConfig = {\n    targetQuerySelector: 'a:not([href=\"#\"]), button, .navbar-back',\n    ...unsavedChangesConfig\n  };\n\n  const containerQuerySelectorItems = ['form', '.snackbar', '[role=dialog]'];\n  // Note: If containerQuerySelectorAll is passed in, it will replace the form as a selector so you can target\n  // specific parts of the form if desired\n  if (unsavedChangesConfig?.containerQuerySelectorAll)\n    containerQuerySelectorItems[0] = unsavedChangesConfig.containerQuerySelectorAll;\n  unsavedChangesConfig.containerQuerySelectorAll = containerQuerySelectorItems.join(', ');\n\n  const [state, dispatch] = useReducer<Reducer<FormReducerState, FormReducerAction>>(formReducer, {\n    activeModal: 'none',\n    shouldCheckForUnsavedChanges: true\n  });\n\n  const handleUnsavedChangesModalClose = () => {\n    dispatch({ name: 'closeModal' });\n    dispatch({ name: 'setShouldCheckForUnsavedChanges', payload: false });\n\n    // Note: Wait for the modal to close before checking for clicks again, this avoids the modal from reopening\n    // if the user clicks as the modal is closing.\n    setTimeout(() => {\n      dispatch({ name: 'setShouldCheckForUnsavedChanges', payload: true });\n    }, 500);\n  };\n\n  const handleUnsavedChangesModalContinue = (formikProps: FormikProps<T>) => {\n    dispatch({ name: 'closeModal' });\n    dispatch({ name: 'setShouldCheckForUnsavedChanges', payload: false });\n\n    // Note: We want to allow the user to continue on with the action they were trying to do as they opened\n    // currently I am thinking triggering a click on the target element is the best approach for this.\n    if (state.capturedUnsavedChangesEvent && unsavedChangesConfig.targetQuerySelector) {\n      const targetElement: HTMLElement | null = (state.capturedUnsavedChangesEvent.target as HTMLElement).closest(\n        unsavedChangesConfig.targetQuerySelector\n      );\n\n      if (targetElement) targetElement.click();\n    }\n\n    // Note: Resetting the form here will prevent times where menu dropdowns might trigger an unsaved changes modal\n    // multiple times\n    formikProps.resetForm();\n\n    // Note: Wait for the modal to close before checking for clicks again, this avoids the modal from reopening\n    // if the user clicks as the modal is closing.\n    setTimeout(() => {\n      dispatch({ name: 'setShouldCheckForUnsavedChanges', payload: true });\n    }, 500);\n  };\n\n  const {\n    modalCloseButtonText = 'Cancel',\n    modalContent = 'Click continue to abandon your changes and proceed.',\n    modalPrimaryButtonText = 'Continue',\n    modalTitle = 'You have unsaved changes!'\n  } = unsavedChangesConfig.modalProps || {};\n\n  return (\n    <Formik {...props} initialStatus={{ ...props.initialStatus, formConfig }}>\n      {(formikProps: FormikProps<T>) => (\n        <FormContent\n          className={className}\n          state={state}\n          dispatch={dispatch}\n          withoutFormElement={withoutFormElement}\n          confirmUnsavedChanges={confirmUnsavedChanges}\n          unsavedChangesConfig={unsavedChangesConfig}\n        >\n          <>\n            {children(formikProps)}\n            <Modal\n              id=\"lc-unsaved-changes-modal\"\n              isOpen={state.activeModal === 'unsavedChangesModal'}\n              closeButton={false}\n              {...unsavedChangesConfig?.modalProps}\n            >\n              <ModalHeader title={modalTitle} />\n              <p className=\"text\">{modalContent}</p>\n              <ModalActions>\n                <div className=\"flex-spacer\" />\n                <Button onClick={handleUnsavedChangesModalClose}>{modalCloseButtonText}</Button>\n                <ButtonPrimary onClick={() => handleUnsavedChangesModalContinue(formikProps)}>\n                  {modalPrimaryButtonText}\n                </ButtonPrimary>\n              </ModalActions>\n            </Modal>\n          </>\n        </FormContent>\n      )}\n    </Formik>\n  );\n}\n"],
  "mappings": "+kBAAA,sCACA,gEACA,0BACA,6CACA,oEACA,6CAEA,mBACA,2CACA,yDA2BA,KAAM,GAOD,AAAC,GAA6G,CAA7G,QAAE,aAAW,QAAO,WAAU,qBAAoB,wBAAuB,wBAAzE,EAAkG,IAAlG,EAAkG,CAAhG,YAAW,QAAO,WAAU,qBAAoB,wBAAuB,yBAC7E,KAAM,GAAc,IAUpB,SAR2B,AAAC,GAAmC,CAC7D,AAAI,CAAC,GAAyB,CAAC,EAAM,QAAU,CAAC,EAAM,8BAAgC,CAAC,EAAY,OAEnG,GAAM,iBACN,EAAS,CAAE,KAAM,YAAa,QAAS,wBACvC,EAAS,CAAE,KAAM,iCAAkC,QAAS,MAK5D,EAAqB,0BACjB,GAAG,EAAqB,uDACxB,OACJ,EAAqB,oBACrB,qCAGK,EACL,gBAAC,MAAD,GAAK,UAAW,EAAW,EAAW,YAAgB,IAEtD,gBAAC,EAAD,GAAY,UAAW,EAAW,EAAW,YAAgB,KAI1D,YAAiB,EAQO,CARP,QACtB,aACA,WACA,qBACA,wBACA,uBAAuB,GACvB,cANsB,EAOnB,IAPmB,EAOnB,CANH,YACA,WACA,qBACA,wBACA,uBACA,eAGA,EAAuB,GACrB,oBAAqB,2CAClB,GAGL,KAAM,GAA8B,CAAC,OAAQ,YAAa,iBAG1D,AAAI,kBAAsB,4BACxB,GAA4B,GAAK,EAAqB,2BACxD,EAAqB,0BAA4B,EAA4B,KAAK,MAElF,KAAM,CAAC,EAAO,GAAY,EAAyD,EAAa,CAC9F,YAAa,OACb,6BAA8B,KAG1B,EAAiC,IAAM,CAC3C,EAAS,CAAE,KAAM,eACjB,EAAS,CAAE,KAAM,kCAAmC,QAAS,KAI7D,WAAW,IAAM,CACf,EAAS,CAAE,KAAM,kCAAmC,QAAS,MAC5D,MAGC,EAAoC,AAAC,GAAgC,CAMzE,GALA,EAAS,CAAE,KAAM,eACjB,EAAS,CAAE,KAAM,kCAAmC,QAAS,KAIzD,EAAM,6BAA+B,EAAqB,oBAAqB,CACjF,KAAM,GAAqC,EAAM,4BAA4B,OAAuB,QAClG,EAAqB,qBAGvB,AAAI,GAAe,EAAc,QAKnC,EAAY,YAIZ,WAAW,IAAM,CACf,EAAS,CAAE,KAAM,kCAAmC,QAAS,MAC5D,MAGC,CACJ,uBAAuB,SACvB,eAAe,sDACf,yBAAyB,WACzB,aAAa,6BACX,EAAqB,YAAc,GAEvC,MACE,iBAAC,EAAD,OAAY,GAAZ,CAAmB,cAAe,OAAK,EAAM,eAAX,CAA0B,iBACzD,AAAC,GACA,gBAAC,EAAD,CACE,UAAW,EACX,MAAO,EACP,SAAU,EACV,mBAAoB,EACpB,sBAAuB,EACvB,qBAAsB,GAEtB,gCACG,EAAS,GACV,gBAAC,EAAD,GACE,GAAG,2BACH,OAAQ,EAAM,cAAgB,sBAC9B,YAAa,IACT,iBAAsB,YAE1B,gBAAC,EAAD,CAAa,MAAO,IACpB,gBAAC,IAAD,CAAG,UAAU,QAAQ,GACrB,gBAAC,EAAD,KACE,gBAAC,MAAD,CAAK,UAAU,gBACf,gBAAC,EAAD,CAAQ,QAAS,GAAiC,GAClD,gBAAC,EAAD,CAAe,QAAS,IAAM,EAAkC,IAC7D",
  "names": []
}
