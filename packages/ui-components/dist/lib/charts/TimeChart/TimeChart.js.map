{
  "version": 3,
  "sources": ["../../../../src/lib/charts/TimeChart/TimeChart.tsx"],
  "sourcesContent": ["import React, { FC, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { merge } from 'lodash';\nimport { ChartJSOptions, ChartTooltipComponent } from '../chart.helpers';\nimport { LineChart, LineChartProps } from '../LineChart/LineChart';\nimport { ChartLegend } from '../ChartLegend/ChartLegend';\nimport { ChartLabel } from '../ChartLabel/ChartLabel';\nimport moment from 'moment';\n\nimport './time-chart.css';\n\nexport interface TimeChartProps extends LineChartProps {}\n\nexport const TimeChart: FC<TimeChartProps> = ({ options, datasets = [], className, ...props }) => {\n  const { datasetDisplayLimit = datasets.length } = options || {};\n  const [visibleDatasets, setVisibleDatasets] = useState<LineChartProps['datasets']>(datasets);\n  const [activeIndexes, setActiveIndexes] = useState(\n    datasets.slice(0, datasetDisplayLimit).map((dataset, index) => index)\n  );\n\n  useEffect(() => {\n    if (datasets && activeIndexes)\n      setVisibleDatasets(\n        datasets.map((dataset: any, index) => ({\n          ...dataset,\n          hidden: !activeIndexes.includes(index)\n        }))\n      );\n  }, [activeIndexes, datasets]);\n\n  const toggleDatasetVisibility = (index: number) => {\n    if (index < 0) return;\n\n    if (!activeIndexes.includes(index) && activeIndexes.length < datasetDisplayLimit)\n      return setActiveIndexes([...activeIndexes, index]);\n\n    setActiveIndexes([...activeIndexes.filter(activeIndex => activeIndex !== index)]);\n  };\n\n  const handleItemClick = (index: number) => toggleDatasetVisibility(index);\n\n  const defaultOptions: ChartJSOptions = {\n    scales: {\n      xAxes: [\n        {\n          type: 'time',\n          time: {\n            minUnit: 'day',\n            round: 'day'\n          }\n        }\n      ]\n    }\n  };\n\n  return (\n    <LineChart\n      datasets={visibleDatasets}\n      className={classNames('lc-chart-time', className)}\n      options={merge(defaultOptions, options)}\n      tooltipComponent={TimeChartTooltip}\n      legendComponent={legendProps => (\n        <ChartLegend {...legendProps} interactive={true} onItemClick={(event, index) => handleItemClick(index)} />\n      )}\n      {...props}\n    />\n  );\n};\n\nconst TimeChartTooltip: ChartTooltipComponent = ({ data }) => {\n  const { color, datasetLabel, xLabel = '', value } = data;\n\n  return (\n    <div className=\"lc-chart-time-tooltip\">\n      <ChartLabel className=\"lc-chart-time-tooltip-label\" color={color} label={datasetLabel} value={value} />\n      {xLabel && <div className=\"lc-chart-time-tooltip-date\">{moment(xLabel).format('ll')}</div>}\n    </div>\n  );\n};\n"],
  "mappings": "+kBAAA,mDACA,0BACA,+BAEA,mDACA,yDACA,sDACA,sBAEA,yBAIO,KAAM,GAAgC,AAAC,GAAoD,CAApD,QAAE,WAAS,WAAW,GAAI,aAA1B,EAAwC,IAAxC,EAAwC,CAAtC,UAAS,WAAe,cACtE,KAAM,CAAE,sBAAsB,EAAS,QAAW,GAAW,GACvD,CAAC,EAAiB,GAAsB,EAAqC,GAC7E,CAAC,EAAe,GAAoB,EACxC,EAAS,MAAM,EAAG,GAAqB,IAAI,CAAC,EAAS,IAAU,IAGjE,EAAU,IAAM,CACd,AAAI,GAAY,GACd,EACE,EAAS,IAAI,CAAC,EAAc,IAAW,OAClC,GADkC,CAErC,OAAQ,CAAC,EAAc,SAAS,QAGrC,CAAC,EAAe,IAEnB,KAAM,GAA0B,AAAC,GAAkB,CACjD,GAAI,IAAQ,GAEZ,IAAI,CAAC,EAAc,SAAS,IAAU,EAAc,OAAS,EAC3D,MAAO,GAAiB,CAAC,GAAG,EAAe,IAE7C,EAAiB,CAAC,GAAG,EAAc,OAAO,GAAe,IAAgB,OAGrE,EAAkB,AAAC,GAAkB,EAAwB,GAE7D,EAAiC,CACrC,OAAQ,CACN,MAAO,CACL,CACE,KAAM,OACN,KAAM,CACJ,QAAS,MACT,MAAO,WAOjB,MACE,iBAAC,EAAD,GACE,SAAU,EACV,UAAW,EAAW,gBAAiB,GACvC,QAAS,EAAM,EAAgB,GAC/B,iBAAkB,EAClB,gBAAiB,GACf,gBAAC,EAAD,OAAiB,GAAjB,CAA8B,YAAa,GAAM,YAAa,CAAC,EAAO,IAAU,EAAgB,OAE9F,KAKJ,EAA0C,CAAC,CAAE,UAAW,CAC5D,KAAM,CAAE,QAAO,eAAc,SAAS,GAAI,SAAU,EAEpD,MACE,iBAAC,MAAD,CAAK,UAAU,yBACb,gBAAC,EAAD,CAAY,UAAU,8BAA8B,MAAO,EAAO,MAAO,EAAc,MAAO,IAC7F,GAAU,gBAAC,MAAD,CAAK,UAAU,8BAA8B,EAAO,GAAQ,OAAO",
  "names": []
}
