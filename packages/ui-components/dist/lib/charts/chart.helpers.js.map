{
  "version": 3,
  "sources": ["../../../src/lib/charts/chart.helpers.ts"],
  "sourcesContent": ["import { ReactNode, RefObject } from 'react';\nimport { ChartDataSets, ChartOptions } from 'chart.js';\nimport ChartComponent, { ChartComponentProps, LinearComponentProps, ChartDataFunction } from 'react-chartjs-2';\n\nexport type ChartLabels = Chart.ChartData['labels'];\n\nexport type ChartRefComponent = ChartComponent<ChartComponentProps | LinearComponentProps>;\n\nexport type ChartRefObject = RefObject<ChartRefComponent>;\n\nexport type ChartTooltipComponent = (props: { data: ChartTooltipData; chartRef: ChartRefObject }) => ReactNode;\n\nexport type ChartLegendComponentProps = {\n  data: ChartJSData | ChartJSDataFunction;\n  interactive?: boolean;\n  onItemClick?: (event: React.MouseEvent<any, MouseEvent>, index: number) => void;\n};\n\nexport type ChartLegendComponent = (props: ChartLegendComponentProps) => ReactNode;\n\nexport interface ChartJSOptions extends ChartOptions {\n  borderRadius?: number;\n  datasetDisplayLimit?: number;\n}\n\nexport interface ChartJSData {\n  labels?: ChartLabels;\n  datasets?: Array<ChartDataSets & { borderRadius?: number }>;\n}\n\nexport type ChartJSDataFunction = ChartDataFunction<ChartJSData>;\n\nexport type ChartTooltipData = {\n  datasetIndex?: number;\n  datasetLabel?: string | number;\n  label?: string;\n  value?: string | number;\n  xLabel?: string | number;\n  yLabel?: string | number;\n  x?: number;\n  y?: number;\n  color?: string;\n};\n\nexport type PieChartData = {\n  label: string;\n  value: number;\n  color: string;\n}[];\n\nexport const getPieChartPercentage = (value: number, data: ChartJSData, hideUnderPercentage?: number) => {\n  if (!data.datasets) return null;\n\n  const dataset = data.datasets[0];\n  const total = (dataset.data as number[]).reduce((acc, curr) => acc + curr, 0);\n  const percentage = Math.round((value / total) * 100);\n  if (isNaN(percentage) || (hideUnderPercentage && percentage < hideUnderPercentage)) return null;\n  return `${percentage}%`;\n};\n\nexport const getComputedPieChartJSData: (\n  chartJSData: ChartJSData | ChartDataFunction<ChartJSData> | undefined,\n  pieChartData?: PieChartData\n) => ChartJSData = (chartJSData, pieChartData) => {\n  if (chartJSData) return chartJSData as ChartJSData;\n\n  return {\n    labels: pieChartData?.map(dataset => dataset.label),\n    datasets: [\n      {\n        data: pieChartData?.map(dataset => dataset.value),\n        backgroundColor: pieChartData?.map(dataset => dataset.color)\n      }\n    ]\n  };\n};\n"],
  "mappings": "AAkDO,KAAM,GAAwB,CAAC,EAAe,EAAmB,IAAiC,CACvG,GAAI,CAAC,EAAK,SAAU,MAAO,MAG3B,KAAM,GAAS,AADC,EAAK,SAAS,GACP,KAAkB,OAAO,CAAC,EAAK,IAAS,EAAM,EAAM,GACrE,EAAa,KAAK,MAAO,EAAQ,EAAS,KAChD,MAAI,OAAM,IAAgB,GAAuB,EAAa,EAA6B,KACpF,GAAG,MAGC,EAGM,CAAC,EAAa,IAC3B,GAEG,CACL,OAAQ,iBAAc,IAAI,GAAW,EAAQ,OAC7C,SAAU,CACR,CACE,KAAM,iBAAc,IAAI,GAAW,EAAQ,OAC3C,gBAAiB,iBAAc,IAAI,GAAW,EAAQ",
  "names": []
}
