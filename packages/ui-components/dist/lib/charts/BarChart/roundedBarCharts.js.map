{
  "version": 3,
  "sources": ["../../../../src/lib/charts/BarChart/roundedBarCharts.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/ban-ts-comment */\n\n// Custom rewrite for radius border on bar draw\n// Code from https://github.com/jedtrow/Chart.js-Rounded-Bar-Charts with a few adjustments\n\n// Also see:\n// https://medium.com/thinkific/how-to-create-a-quick-react-component-with-chartjs-2-and-cool-customizations-part-1-of-2-b15571f7d2b5\n// https://github.com/reactchartjs/react-chartjs-2/issues/257\n// https://github.com/chartjs/Chart.js/issues/3072#issuecomment-708413792\n\n// @ts-ignore\nimport { Chart as ChartJS } from 'react-chartjs-2';\n\nChartJS.elements.Rectangle.prototype.draw = function () {\n  const ctx = this._chart.ctx;\n  const vm = this._view;\n  let left = 0;\n  let right = 0;\n  let top = 0;\n  let bottom = 0;\n  let signX = 0;\n  let signY = 0;\n  let borderSkipped;\n  let borderWidth = vm.borderWidth;\n\n  // If radius is less than 0 or is large enough to cause drawing errors a max\n  // radius is imposed. If borderRadius is not defined set it to 0.\n  let borderRadius = this._chart.config.options.borderRadius;\n  if (borderRadius < 0) {\n    borderRadius = 0;\n  }\n  if (typeof borderRadius === 'undefined') {\n    borderRadius = 0;\n  }\n\n  if (!vm.horizontal) {\n    left = vm.x - vm.width / 2;\n    right = vm.x + vm.width / 2;\n    top = vm.y;\n    bottom = vm.base;\n    signX = 1;\n    signY = bottom > top ? 1 : -1;\n    borderSkipped = vm.borderSkipped || 'bottom';\n  }\n\n  // Canvas doesn't allow us to stroke inside the width so we can\n  // adjust the sizes to fit if we're setting a stroke on the line\n  if (borderWidth) {\n    // borderWidth should be less than bar width and bar height.\n    const barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));\n    borderWidth = borderWidth > barSize ? barSize : borderWidth;\n    const halfStroke = borderWidth / 2;\n\n    // Adjust borderWidth when bar top position is near vm.base(zero).\n    const borderLeft = left + (borderSkipped !== 'left' ? halfStroke * signX : 0);\n    const borderRight = right + (borderSkipped !== 'right' ? -halfStroke * signX : 0);\n    const borderTop = top + (borderSkipped !== 'top' ? halfStroke * signY : 0);\n    const borderBottom = bottom + (borderSkipped !== 'bottom' ? -halfStroke * signY : 0);\n\n    // not become a vertical line?\n    if (borderLeft !== borderRight) {\n      top = borderTop;\n      bottom = borderBottom;\n    }\n\n    // not become a horizontal line?\n    if (borderTop !== borderBottom) {\n      left = borderLeft;\n      right = borderRight;\n    }\n  }\n\n  ctx.beginPath();\n  ctx.fillStyle = vm.backgroundColor;\n  ctx.strokeStyle = vm.borderColor;\n  ctx.lineWidth = borderWidth;\n\n  // Corner points, from bottom-left to bottom-right clockwise\n  // | 1 2 |\n  // | 0 3 |\n  const corners = [\n    [left, bottom],\n    [left, top],\n    [right, top],\n    [right, bottom]\n  ];\n\n  // Find first (starting) corner with fallback to 'bottom'\n  const borders = ['bottom', 'left', 'top', 'right'];\n  let startCorner = borders.indexOf(borderSkipped, 0);\n  if (startCorner === -1) {\n    startCorner = 0;\n  }\n\n  function cornerAt(index: number) {\n    return corners[(startCorner + index) % 4];\n  }\n\n  // Draw rectangle from 'startCorner'\n  let corner = cornerAt(0);\n  ctx.moveTo(corner[0], corner[1]);\n\n  for (let i = 1; i < 4; i++) {\n    corner = cornerAt(i);\n    let nextCornerId = i + 1;\n    if (nextCornerId === 4) {\n      nextCornerId = 0;\n    }\n\n    const width = corners[2][0] - corners[1][0];\n    const height = corners[0][1] - corners[1][1];\n    const x = corners[1][0];\n    const y = corners[1][1];\n\n    let radius = borderRadius;\n\n    // Fix radius being too large\n    if (radius > Math.abs(height) / 1.5) {\n      radius = Math.floor(Math.abs(height) / 1.5);\n    }\n    if (radius > Math.abs(width) / 1.5) {\n      radius = Math.floor(Math.abs(width) / 1.5);\n    }\n\n    if (height < 0) {\n      // Negative values in a standard bar chart\n      const x_tl = x;\n      const x_tr = x + width;\n      const y_tl = y + height;\n      const y_tr = y + height;\n\n      const x_bl = x;\n      const x_br = x + width;\n      const y_bl = y;\n      const y_br = y;\n\n      // Draw\n      ctx.moveTo(x_bl + radius, y_bl);\n      ctx.lineTo(x_br - radius, y_br);\n      ctx.quadraticCurveTo(x_br, y_br, x_br, y_br - radius);\n      ctx.lineTo(x_tr, y_tr + radius);\n      ctx.quadraticCurveTo(x_tr, y_tr, x_tr - radius, y_tr);\n      ctx.lineTo(x_tl + radius, y_tl);\n      ctx.quadraticCurveTo(x_tl, y_tl, x_tl, y_tl + radius);\n      ctx.lineTo(x_bl, y_bl - radius);\n      ctx.quadraticCurveTo(x_bl, y_bl, x_bl + radius, y_bl);\n    } else {\n      ctx.moveTo(x + radius, y);\n      ctx.lineTo(x + width - radius, y);\n      ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n      ctx.lineTo(x + width, y + height - radius);\n      ctx.quadraticCurveTo(x + width, y + height, x + width, y + height);\n      ctx.lineTo(x + radius, y + height);\n      ctx.quadraticCurveTo(x, y + height, x, y + height);\n      ctx.lineTo(x, y + radius);\n      ctx.quadraticCurveTo(x, y, x + radius, y);\n    }\n  }\n\n  ctx.fill();\n  if (borderWidth) {\n    ctx.stroke();\n  }\n};\n"],
  "mappings": "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",
  "names": []
}
