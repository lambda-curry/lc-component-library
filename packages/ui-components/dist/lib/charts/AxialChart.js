var m=Object.defineProperty;var s=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;var h=(r,t,a)=>t in r?m(r,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):r[t]=a,p=(r,t)=>{for(var a in t||(t={}))l.call(t,a)&&h(r,a,t[a]);if(s)for(var a of s(t))n.call(t,a)&&h(r,a,t[a]);return r};var C=(r,t)=>{var a={};for(var o in r)l.call(r,o)&&t.indexOf(o)<0&&(a[o]=r[o]);if(r!=null&&s)for(var o of s(r))t.indexOf(o)<0&&n.call(r,o)&&(a[o]=r[o]);return a};import c from"react";import d from"classnames";import{merge as g}from"lodash";import{getColorVar as e}from"../util/colors";import{ChartBase as x}from"./ChartBase";const F=o=>{var i=o,{options:r,className:t}=i,a=C(i,["options","className"]);const f={scales:{gridLines:{drawBorder:!1},yAxes:[{position:"right",ticks:{beginAtZero:!0,padding:24,fontSize:14,fontColor:e("gray")},gridLines:{borderDash:[2,2],drawBorder:!1,color:e("gray-lighter"),zeroLineColor:e("gray-lighter")}}],xAxes:[{offset:!0,ticks:{padding:12,fontSize:14,fontColor:e("gray")},gridLines:{display:!1}}]}};return c.createElement(x,p({className:d("lc-chart-axial",t),options:g(f,r)},a))};export{F as AxialChart};
//# sourceMappingURL=AxialChart.js.map
