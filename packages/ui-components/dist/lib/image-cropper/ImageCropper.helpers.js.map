{
  "version": 3,
  "sources": ["../../../src/lib/image-cropper/ImageCropper.helpers.ts"],
  "sourcesContent": ["import { Crop } from 'react-image-crop';\nimport { CroppedImage } from './ImageCropper.types';\n\nexport function getCroppedImage({\n  image,\n  crop,\n  fileName = 'new-file.jpg',\n  mimeType = 'image/jpeg',\n  quality = 0.85\n}: {\n  image: HTMLImageElement;\n  crop: Crop;\n  fileName?: string;\n  mimeType?: string;\n  quality?: number;\n}): Promise<CroppedImage> {\n  const cropWidth = crop.width || 0;\n  const cropHeight = crop.height || 0;\n  const cropPositionX = crop.x || 0;\n  const cropPositionY = crop.y || 0;\n  const isPercent = crop.unit === '%';\n  const canvas = document.createElement('canvas');\n\n  let scaleX = image.naturalWidth / image.width;\n  let scaleY = image.naturalHeight / image.height;\n\n  if (isPercent) {\n    scaleX = 0.01 * image.naturalWidth;\n    scaleY = 0.01 * image.naturalHeight;\n  }\n\n  const sx = Math.round(cropPositionX * scaleX);\n  const sy = Math.round(cropPositionY * scaleY);\n  const sWidth = Math.round(cropWidth * scaleX);\n  const sHeight = Math.round(cropHeight * scaleY);\n  const dWidth = Math.round(cropWidth * (isPercent ? scaleX : 1));\n  const dHeight = Math.round(cropHeight * (isPercent ? scaleY : 1));\n\n  canvas.width = dWidth;\n  canvas.height = dHeight;\n\n  const ctx = canvas.getContext('2d');\n\n  if (!ctx) return Promise.reject(new Error('No canvas context.'));\n\n  ctx.drawImage(image, sx, sy, Math.round(sWidth), sHeight, 0, 0, dWidth, dHeight);\n\n  return new Promise((resolve, reject) => {\n    canvas.toBlob(\n      (blob: Blob | null) => {\n        if (!blob) return reject(new Error('Canvas is empty'));\n\n        const file = blobToFile(blob, fileName);\n\n        const preview = URL.createObjectURL(blob);\n\n        resolve({ file, preview, width: dWidth, height: dHeight });\n      },\n      mimeType,\n      quality\n    );\n  });\n}\n\nexport const blobToFile = (blob: Blob, fileName: string): File => {\n  const file: any = blob;\n\n  file.lastModifiedDate = new Date();\n  file.name = fileName;\n\n  return file;\n};\n\nexport const fetchFileFromURL = async (url: string, fileName = 'newFile.jpg', mimeType: string = 'image/jpeg') => {\n  const response = await fetch(url);\n  const data = await response.blob();\n\n  return new File([data], fileName, { type: mimeType });\n};\n"],
  "mappings": "AAGO,WAAyB,CAC9B,QACA,OACA,WAAW,eACX,WAAW,aACX,UAAU,KAOc,CACxB,KAAM,GAAY,EAAK,OAAS,EAC1B,EAAa,EAAK,QAAU,EAC5B,EAAgB,EAAK,GAAK,EAC1B,EAAgB,EAAK,GAAK,EAC1B,EAAY,EAAK,OAAS,IAC1B,EAAS,SAAS,cAAc,UAEtC,GAAI,GAAS,EAAM,aAAe,EAAM,MACpC,EAAS,EAAM,cAAgB,EAAM,OAEzC,AAAI,GACF,GAAS,IAAO,EAAM,aACtB,EAAS,IAAO,EAAM,eAGxB,KAAM,GAAK,KAAK,MAAM,EAAgB,GAChC,EAAK,KAAK,MAAM,EAAgB,GAChC,EAAS,KAAK,MAAM,EAAY,GAChC,EAAU,KAAK,MAAM,EAAa,GAClC,EAAS,KAAK,MAAM,EAAa,GAAY,EAAS,IACtD,EAAU,KAAK,MAAM,EAAc,GAAY,EAAS,IAE9D,EAAO,MAAQ,EACf,EAAO,OAAS,EAEhB,KAAM,GAAM,EAAO,WAAW,MAE9B,MAAK,GAEL,GAAI,UAAU,EAAO,EAAI,EAAI,KAAK,MAAM,GAAS,EAAS,EAAG,EAAG,EAAQ,GAEjE,GAAI,SAAQ,CAAC,EAAS,IAAW,CACtC,EAAO,OACL,AAAC,GAAsB,CACrB,GAAI,CAAC,EAAM,MAAO,GAAO,GAAI,OAAM,oBAEnC,KAAM,GAAO,EAAW,EAAM,GAExB,EAAU,IAAI,gBAAgB,GAEpC,EAAQ,CAAE,OAAM,UAAS,MAAO,EAAQ,OAAQ,KAElD,EACA,MAhBa,QAAQ,OAAO,GAAI,OAAM,uBAqBrC,KAAM,GAAa,CAAC,EAAY,IAA2B,CAChE,KAAM,GAAY,EAElB,SAAK,iBAAmB,GAAI,MAC5B,EAAK,KAAO,EAEL,GAGI,EAAmB,MAAO,EAAa,EAAW,cAAe,EAAmB,eAAiB,CAEhH,KAAM,GAAO,KAAM,AADF,MAAM,OAAM,IACD,OAE5B,MAAO,IAAI,MAAK,CAAC,GAAO,EAAU,CAAE,KAAM",
  "names": []
}
