function E({image:t,crop:e,fileName:n="new-file.jpg",mimeType:d="image/jpeg",quality:s=.85}){const l=e.width||0,g=e.height||0,m=e.x||0,w=e.y||0,a=e.unit==="%",o=document.createElement("canvas");let r=t.naturalWidth/t.width,i=t.naturalHeight/t.height;a&&(r=.01*t.naturalWidth,i=.01*t.naturalHeight);const f=Math.round(m*r),y=Math.round(w*i),M=Math.round(l*r),x=Math.round(g*i),c=Math.round(l*(a?r:1)),h=Math.round(g*(a?i:1));o.width=c,o.height=h;const u=o.getContext("2d");return u?(u.drawImage(t,f,y,Math.round(M),x,0,0,c,h),new Promise((C,j)=>{o.toBlob(p=>{if(!p)return j(new Error("Canvas is empty"));const F=I(p,n),H=URL.createObjectURL(p);C({file:F,preview:H,width:c,height:h})},d,s)})):Promise.reject(new Error("No canvas context."))}const I=(t,e)=>{const n=t;return n.lastModifiedDate=new Date,n.name=e,n},L=async(t,e="newFile.jpg",n="image/jpeg")=>{const s=await(await fetch(t)).blob();return new File([s],e,{type:n})};export{I as blobToFile,L as fetchFileFromURL,E as getCroppedImage};
//# sourceMappingURL=ImageCropper.helpers.js.map
