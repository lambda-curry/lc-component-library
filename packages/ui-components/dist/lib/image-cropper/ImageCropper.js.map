{
  "version": 3,
  "sources": ["../../../src/lib/image-cropper/ImageCropper.tsx"],
  "sourcesContent": ["// Vendors\nimport React, { FC, useState, useEffect } from 'react';\nimport ReactCrop, { Crop } from 'react-image-crop';\n\n// Components\nimport { Modal } from '../modal/Modal';\nimport { ModalHeader } from '../modal/ModalHeader';\nimport { Button } from '../buttons/Button';\nimport { ButtonPrimary } from '../buttons/ButtonPrimary';\n\n// Helpers\nimport { formatBytes } from '../file-uploader/FileUploader.helpers';\nimport { getCroppedImage } from './ImageCropper.helpers';\n\n// Styles\nimport 'react-image-crop/dist/ReactCrop.css';\nimport './image-cropper.css';\n\n// Types\nimport { ImageCropperProps, CroppedImage } from './ImageCropper.types';\nimport classNames from 'classnames';\n\nexport const ImageCropper: FC<ImageCropperProps> = ({\n  src,\n  file,\n  mimeType = 'image/jpeg',\n  fileName = 'newFile.jpg',\n  quality = 0.85,\n  isOpen,\n  onSave,\n  onCancel,\n  onAfterOpen,\n  onAfterClose,\n  ruleOfThirds = true,\n  modalTitle = 'Crop your image',\n  className,\n  ...props\n}) => {\n  const initialCrop = {\n    unit: '%' as Crop['unit'],\n    width: 100,\n    height: 100,\n    y: 0,\n    x: 0,\n    ...props.initialCrop\n  };\n\n  const [crop, setCrop] = useState<Crop>(initialCrop);\n  const [open, setOpen] = useState(!!isOpen);\n  const [imageRef, setImageRef] = useState<HTMLImageElement | null>(null);\n  const [croppedImage, setCroppedImage] = useState<CroppedImage | null>(null);\n  const [cropping, setCropping] = useState(false);\n\n  const cropSrc = file ? file.preview : src;\n  const isPercent = initialCrop.unit === '%';\n  const aspectRatio = initialCrop.aspect;\n\n  useEffect(() => {\n    setOpen(!!isOpen);\n  }, [isOpen]);\n\n  // TODO: We don't always want this to happen. So we probably want to add some way to control this outside the component\n  useEffect(\n    () => () => {\n      // Make sure to revoke the data uris to avoid memory leaks\n      if (croppedImage) URL.revokeObjectURL(croppedImage.preview);\n    },\n    []\n  );\n\n  function getComputedCrop(newCrop: Crop, newPercentCrop?: Crop) {\n    return isPercent && newPercentCrop\n      ? { ...newPercentCrop, aspect: aspectRatio }\n      : { ...newCrop, aspect: aspectRatio };\n  }\n\n  const makeClientCrop = async (newCrop: Crop, imageRefOverride?: HTMLImageElement): Promise<CroppedImage | null> => {\n    let newCroppedImage = null;\n    const newImageRef = imageRefOverride || imageRef;\n\n    if (!newImageRef) return newCroppedImage;\n\n    setCropping(true);\n\n    if (newImageRef && crop.width && crop.height) {\n      newCroppedImage = await getCroppedImage({\n        image: newImageRef,\n        crop: getComputedCrop(newCrop),\n        fileName,\n        mimeType\n      });\n\n      setCroppedImage(newCroppedImage);\n    }\n\n    setCropping(false);\n\n    return newCroppedImage;\n  };\n\n  const handleAfterOpen = async () => {\n    if (onAfterOpen) onAfterOpen();\n  };\n\n  const handleAfterClose = () => {\n    setCrop(initialCrop);\n\n    if (onAfterClose) onAfterClose();\n  };\n\n  const handleCropChange = (newCrop: Crop, newPercentCrop: Crop) => {\n    setCrop(getComputedCrop(newCrop, newPercentCrop));\n  };\n\n  const handleCropComplete = async (newCrop: Crop, newPercentCrop: Crop) => {\n    await makeClientCrop(getComputedCrop(newCrop, newPercentCrop));\n  };\n\n  const handleImageLoaded = async (newImage: HTMLImageElement) => {\n    setImageRef(newImage);\n    await makeClientCrop(initialCrop, newImage);\n    return false;\n  };\n\n  const cleanup = () => {\n    setCrop(initialCrop);\n    setImageRef(null);\n  };\n\n  const handleCancel = () => {\n    setOpen(false);\n    cleanup();\n\n    if (onCancel) onCancel();\n  };\n\n  const handleSave = async () => {\n    let newCroppedImage = croppedImage;\n\n    newCroppedImage = await makeClientCrop(crop);\n\n    setOpen(false);\n    cleanup();\n\n    if (onSave) onSave(newCroppedImage);\n  };\n\n  if (!cropSrc) return null;\n\n  return (\n    <Modal\n      className={classNames('lc-image-cropper-modal', className)}\n      isOpen={open}\n      onAfterOpen={handleAfterOpen}\n      onAfterClose={handleAfterClose}\n      closeButton={false}\n    >\n      <ModalHeader className=\"lc-image-cropper-header\" title={modalTitle} />\n\n      <div className=\"lc-image-cropper-cropper\">\n        <ReactCrop\n          {...props}\n          src={cropSrc}\n          crop={crop}\n          onChange={handleCropChange}\n          onComplete={handleCropComplete}\n          onImageLoaded={handleImageLoaded}\n          ruleOfThirds={ruleOfThirds}\n          crossorigin=\"anonymous\"\n        />\n      </div>\n\n      <div className=\"lc-image-cropper-footer\">\n        {croppedImage && croppedImage.preview && (\n          <div className=\"lc-image-cropper-preview\">\n            <div className=\"lc-image-cropper-preview-image\">\n              <img src={croppedImage.preview} alt=\"crop preview\" />\n            </div>\n            <div className=\"lc-image-cropper-preview-info\">\n              <strong>Preview</strong>\n              <br />\n              {croppedImage.width} x {croppedImage.height} ({formatBytes(croppedImage.file.size)})\n            </div>\n          </div>\n        )}\n\n        <div className=\"lc-flex-1\" />\n\n        <div className=\"lc-image-cropper-actions\">\n          <Button onClick={handleCancel} disabled={cropping}>\n            Cancel\n          </Button>\n          <ButtonPrimary onClick={handleSave} disabled={cropping}>\n            Save\n          </ButtonPrimary>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n"],
  "mappings": "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",
  "names": []
}
