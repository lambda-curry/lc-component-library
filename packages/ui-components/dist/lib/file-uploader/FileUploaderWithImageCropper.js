var E=Object.defineProperty;var a=Object.getOwnPropertySymbols;var u=Object.prototype.hasOwnProperty,I=Object.prototype.propertyIsEnumerable;var h=(p,e,o)=>e in p?E(p,e,{enumerable:!0,configurable:!0,writable:!0,value:o}):p[e]=o,i=(p,e)=>{for(var o in e||(e={}))u.call(e,o)&&h(p,o,e[o]);if(a)for(var o of a(e))I.call(e,o)&&h(p,o,e[o]);return p};var d=(p,e)=>{var o={};for(var l in p)u.call(p,l)&&e.indexOf(l)<0&&(o[l]=p[l]);if(p!=null&&a)for(var l of a(p))e.indexOf(l)<0&&I.call(p,l)&&(o[l]=p[l]);return o};import n,{useState as b}from"react";import{FileUploader as x}from"./FileUploader";import{ImageCropper as z}from"../image-cropper/ImageCropper";const Q=({name:p,formikProps:e,fileUploaderProps:o={},imageCropperProps:l={}})=>{var U,f;const F=o,{onDropAccepted:C}=F,v=d(F,["onDropAccepted"]),g=l,{onSave:c}=g,S=d(g,["onSave"]),m={open:!1},[t,s]=b(m),D=(r,V)=>{const W=r[0];s({open:!0,file:W}),C&&C(r,V)},y=r=>{(e==null?void 0:e.setFieldValue)&&e.setFieldValue(p,[r]),c&&c(r)},A=()=>{(e==null?void 0:e.setFieldValue)&&e.setFieldValue(p,[])};return n.createElement(n.Fragment,null,n.createElement(x,i({name:p,formikProps:e,onDropAccepted:D,multiple:!1},v)),n.createElement(z,i({isOpen:t.open,file:t.file,mimeType:(U=t.file)==null?void 0:U.type,fileName:(f=t.file)==null?void 0:f.name,onAfterClose:()=>s(m),onSave:y,onCancel:A},S)))};export{Q as FileUploaderWithImageCropper};
//# sourceMappingURL=FileUploaderWithImageCropper.js.map
